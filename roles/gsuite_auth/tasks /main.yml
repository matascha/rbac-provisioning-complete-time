---
- name: Generate token using script
  command: >
    python3 {{ token_generator_script }}
    {{ service_account_path }}
    {{ impersonate_user }}
  register: token_output

- name: Parse token JSON
  set_fact:
    gsuite_token_data: "{{ token_output.stdout | from_json }}"

- name: Load token from cache if exists
  stat:
    path: "{{ cache_file }}"
  register: token_cache_stat

- name: Read token cache
  slurp:
    src: "{{ cache_file }}"
  register: token_cache_raw
  when: token_cache_stat.stat.exists

- name: Parse token cache
  set_fact:
    gsuite_token_data: "{{ (token_cache_raw.content | b64decode) | from_json }}"
  when: token_cache_stat.stat.exists

- name: Check if token is expired
  set_fact:
    token_expired: "{{ (gsuite_token_data.expires_at | to_datetime('%Y-%m-%dT%H:%M:%S%z')) < (ansible_date_time.iso8601 | to_datetime('%Y-%m-%dT%H:%M:%SZ')).astimezone(gsuite_token_data.expires_at | to_datetime('%Y-%m-%dT%H:%M:%S%z')).tzinfo }}"
  when: token_cache_stat.stat.exists

#- name: Generate new token if cache missing or expired
#  community.general.run_python_script:
#    script: "{{ token_generator_script }}"
#    argv:
#      - "{{ service_account_path }}"
#      - "{{ impersonate_user }}"
#      - "{{ cache_file }}"
#  register: token_output
#  when: not token_cache_stat.stat.exists or token_expired | bool

- name: Generate new token using command
  command: >
    python3 scripts/gen_gsuite_token.py "{{ service_account_path }}" "{{ impersonate_user }}" "{{ cache_file }}"
  register: token_output
  when: not token_cache_stat.stat.exists or token_expired | bool

- name: Set gsuite_token_data from newly generated token
  set_fact:
    gsuite_token_data: "{{ token_output.stdout | from_json }}"
  when: token_output is defined
